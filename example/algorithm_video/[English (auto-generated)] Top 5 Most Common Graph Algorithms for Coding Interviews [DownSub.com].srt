1
00:00:00,000 --> 00:00:02,240
hey everyone welcome back and today

2
00:00:02,240 --> 00:00:04,160
let's not write some neat code because

3
00:00:04,160 --> 00:00:06,080
today we are going to be quickly running

4
00:00:06,080 --> 00:00:08,559
through the top five most common graph

5
00:00:08,559 --> 00:00:10,960
algorithms for coding interviews so the

6
00:00:10,960 --> 00:00:13,759
number one most common graph algorithm

7
00:00:13,759 --> 00:00:15,759
you may have expected this is depth

8
00:00:15,759 --> 00:00:19,279
first search dfs now the time complexity

9
00:00:19,279 --> 00:00:21,760
of this algorithm in most cases is going

10
00:00:21,760 --> 00:00:24,880
to be linear time in other words big o

11
00:00:24,880 --> 00:00:27,359
of n where n is going to be the number

12
00:00:27,359 --> 00:00:30,320
of nodes inside of our graph so if

13
00:00:30,320 --> 00:00:31,760
you're familiar with graphs you know

14
00:00:31,760 --> 00:00:33,760
that graphs are made up of nodes which

15
00:00:33,760 --> 00:00:36,800
can contain values and also edges which

16
00:00:36,800 --> 00:00:39,760
connect the nodes together if we have n

17
00:00:39,760 --> 00:00:42,800
nodes then dfs runs in big o of n time

18
00:00:42,800 --> 00:00:44,640
now what kind of data structures are

19
00:00:44,640 --> 00:00:47,280
needed for dfs well if you are going to

20
00:00:47,280 --> 00:00:49,680
do this recursively the only data

21
00:00:49,680 --> 00:00:52,000
structure you will most likely need is

22
00:00:52,000 --> 00:00:55,280
going to be a hash set the hash set is

23
00:00:55,280 --> 00:00:58,079
specifically to basically detect a cycle

24
00:00:58,079 --> 00:00:59,840
because depth for search is about

25
00:00:59,840 --> 00:01:02,399
traversing a graph so for example if we

26
00:01:02,399 --> 00:01:04,239
start at this position we want to

27
00:01:04,239 --> 00:01:06,159
traverse the graph we go to the next

28
00:01:06,159 --> 00:01:08,720
node we go to a another node over here

29
00:01:08,720 --> 00:01:10,400
suppose these two nodes were connected

30
00:01:10,400 --> 00:01:12,720
then we travel to this node and then

31
00:01:12,720 --> 00:01:14,479
we'd get here and then we'd travel back

32
00:01:14,479 --> 00:01:16,560
to this node which would get us stuck

33
00:01:16,560 --> 00:01:19,040
into a cycle right now we don't want to

34
00:01:19,040 --> 00:01:21,040
stay stuck in this cycle forever which

35
00:01:21,040 --> 00:01:23,759
is why hash sets are required in many

36
00:01:23,759 --> 00:01:26,640
cases for the dfs algorithm on a generic

37
00:01:26,640 --> 00:01:28,799
graph if you are doing this recursively

38
00:01:28,799 --> 00:01:30,880
you will not need a stack because the

39
00:01:30,880 --> 00:01:32,720
recursion handles that for you but if

40
00:01:32,720 --> 00:01:35,040
you do not do this recursively you can

41
00:01:35,040 --> 00:01:38,400
optionally decide to use a stack for dfs

42
00:01:38,400 --> 00:01:40,720
problems now let's suppose we were doing

43
00:01:40,720 --> 00:01:43,280
a dfs on this graph let's say starting

44
00:01:43,280 --> 00:01:45,439
from a now obviously this looks exactly

45
00:01:45,439 --> 00:01:47,759
like a tree and yes it is a tree but we

46
00:01:47,759 --> 00:01:50,560
know that trees are just special cases

47
00:01:50,560 --> 00:01:53,439
of graphs so this is still a generic

48
00:01:53,439 --> 00:01:55,280
graph now if we were starting here at

49
00:01:55,280 --> 00:01:58,000
this a node and we were doing a dfs what

50
00:01:58,000 --> 00:02:01,759
would be the output well the output we'd

51
00:02:01,759 --> 00:02:03,920
first process the first node we'd get an

52
00:02:03,920 --> 00:02:07,040
a then we'd go to the next node right

53
00:02:07,040 --> 00:02:09,360
now dfs works basically going depth

54
00:02:09,360 --> 00:02:11,840
first so so it's depth first so we we do

55
00:02:11,840 --> 00:02:15,360
b now next we go to c you can see that

56
00:02:15,360 --> 00:02:17,040
this is definitely depth first we're

57
00:02:17,040 --> 00:02:19,680
going as deep as we can in one direction

58
00:02:19,680 --> 00:02:21,920
so we get to c now now we can't go any

59
00:02:21,920 --> 00:02:24,000
farther from c left or right so we go

60
00:02:24,000 --> 00:02:26,640
back up and we go to the next node that

61
00:02:26,640 --> 00:02:28,800
was available to us the farthest down

62
00:02:28,800 --> 00:02:30,640
depth first right d

63
00:02:30,640 --> 00:02:32,879
and now there's no more nodes anywhere

64
00:02:32,879 --> 00:02:34,800
left over here so then we go to the next

65
00:02:34,800 --> 00:02:37,360
node that was available which was e we

66
00:02:37,360 --> 00:02:39,200
have done the entire graph and this is

67
00:02:39,200 --> 00:02:42,480
the output abcde next let's go to our

68
00:02:42,480 --> 00:02:45,680
second algorithm bfs or breadth first

69
00:02:45,680 --> 00:02:48,319
search and as the name implies this is

70
00:02:48,319 --> 00:02:50,560
also a searching algorithm which is

71
00:02:50,560 --> 00:02:53,599
basically designed to traverse a graph

72
00:02:53,599 --> 00:02:55,200
now this is going to be slightly

73
00:02:55,200 --> 00:02:57,840
different than depth first search mainly

74
00:02:57,840 --> 00:03:00,080
in the order that it traverses the

75
00:03:00,080 --> 00:03:01,519
values which is what we're going to see

76
00:03:01,519 --> 00:03:04,720
when i show you the output how d bfs

77
00:03:04,720 --> 00:03:07,200
would traverse this graph but the time

78
00:03:07,200 --> 00:03:08,879
complexity actually of this graph is

79
00:03:08,879 --> 00:03:10,720
going to be the same as dfs because

80
00:03:10,720 --> 00:03:13,519
we're going to visit each node at most

81
00:03:13,519 --> 00:03:15,599
once so the time complexity is going to

82
00:03:15,599 --> 00:03:17,920
be big o of n where n is the number of

83
00:03:17,920 --> 00:03:21,280
nodes in the graph the data structures

84
00:03:21,280 --> 00:03:23,519
typically needed for this algorithm and

85
00:03:23,519 --> 00:03:26,000
it's usually not implemented recursively

86
00:03:26,000 --> 00:03:28,879
so it usually requires a q data

87
00:03:28,879 --> 00:03:31,519
structure a double-ended queue usually

88
00:03:31,519 --> 00:03:34,080
again in in our graph we could have a

89
00:03:34,080 --> 00:03:36,560
cycle similar to the dfs case so we

90
00:03:36,560 --> 00:03:38,400
don't want to get stuck in a loop where

91
00:03:38,400 --> 00:03:40,560
we go to one node go to the next node

92
00:03:40,560 --> 00:03:42,080
and then just stay stuck in there

93
00:03:42,080 --> 00:03:43,360
forever because we don't want to visit

94
00:03:43,360 --> 00:03:45,280
the same node twice how can we avoid

95
00:03:45,280 --> 00:03:48,159
that same case same way that we did in

96
00:03:48,159 --> 00:03:51,519
dfs which is using a hash set to detect

97
00:03:51,519 --> 00:03:54,239
duplicate nodes and bfs is kind of the

98
00:03:54,239 --> 00:03:56,480
opposite of dfs so let's say we start at

99
00:03:56,480 --> 00:03:58,400
the same first node right we start at a

100
00:03:58,400 --> 00:04:01,120
so let's add a to the output now instead

101
00:04:01,120 --> 00:04:03,120
of going the farthest we can in one

102
00:04:03,120 --> 00:04:04,720
direction like we did before like going

103
00:04:04,720 --> 00:04:07,040
to b and then going to c let's do

104
00:04:07,040 --> 00:04:08,959
breadth first search right breath

105
00:04:08,959 --> 00:04:10,959
meaning everything that's close to us

106
00:04:10,959 --> 00:04:13,439
basically we're gonna do this layer

107
00:04:13,439 --> 00:04:14,879
first right we're gonna we're gonna

108
00:04:14,879 --> 00:04:17,279
traverse this entire layer and then

109
00:04:17,279 --> 00:04:19,358
we're gonna traverse the next layer and

110
00:04:19,358 --> 00:04:21,120
then keep doing that until we run out of

111
00:04:21,120 --> 00:04:23,600
layers to traverse so let's go let's

112
00:04:23,600 --> 00:04:26,800
first go to b so b is gonna be processed

113
00:04:26,800 --> 00:04:29,360
adding it to the output then let's go to

114
00:04:29,360 --> 00:04:32,000
e adding this to the output and you can

115
00:04:32,000 --> 00:04:34,080
see that this is a different output than

116
00:04:34,080 --> 00:04:36,160
we had when we ran dfs so this is a

117
00:04:36,160 --> 00:04:37,759
different ordering that we're going to

118
00:04:37,759 --> 00:04:40,160
traverse these nodes in so we've done

119
00:04:40,160 --> 00:04:42,479
the second layer over here let's do the

120
00:04:42,479 --> 00:04:45,040
next layer over here so we'll do c and

121
00:04:45,040 --> 00:04:47,840
then d so let's add c and d to the

122
00:04:47,840 --> 00:04:49,600
output and then you can see everything

123
00:04:49,600 --> 00:04:51,680
has been processed in the entire graph

124
00:04:51,680 --> 00:04:53,919
we had a slightly different output than

125
00:04:53,919 --> 00:04:56,880
we did with the dfs case so the third

126
00:04:56,880 --> 00:04:59,120
graph algorithm is definitely a little

127
00:04:59,120 --> 00:05:02,000
bit different this is union find which

128
00:05:02,000 --> 00:05:04,720
is used to kind of union together

129
00:05:04,720 --> 00:05:07,039
disjoint sets and kind of combine them

130
00:05:07,039 --> 00:05:09,520
together efficiently so the overall time

131
00:05:09,520 --> 00:05:11,759
complexity of this algorithm is usually

132
00:05:11,759 --> 00:05:13,840
bounded by n

133
00:05:13,840 --> 00:05:15,360
log n

134
00:05:15,360 --> 00:05:17,280
and in terms of data structures what

135
00:05:17,280 --> 00:05:19,600
i'll say is just that it it requires

136
00:05:19,600 --> 00:05:22,400
basically a forest of trees which is

137
00:05:22,400 --> 00:05:24,240
really how i was taught how this is

138
00:05:24,240 --> 00:05:25,680
implemented but basically you usually

139
00:05:25,680 --> 00:05:27,600
have to implement union find yourself

140
00:05:27,600 --> 00:05:29,600
the good thing is it's not super hard to

141
00:05:29,600 --> 00:05:31,840
implement it because for example one

142
00:05:31,840 --> 00:05:33,520
thing we could do with union find is

143
00:05:33,520 --> 00:05:35,360
basically what if we wanted to know the

144
00:05:35,360 --> 00:05:38,400
number of connected components of a

145
00:05:38,400 --> 00:05:40,400
graph and we were given five different

146
00:05:40,400 --> 00:05:42,240
nodes now of course in this case we have

147
00:05:42,240 --> 00:05:44,320
five connected components each of these

148
00:05:44,320 --> 00:05:46,400
is a component now but what if we start

149
00:05:46,400 --> 00:05:49,039
arbitrarily adding edges if i say okay

150
00:05:49,039 --> 00:05:51,360
i'm going to add an edge here i'm adding

151
00:05:51,360 --> 00:05:53,680
one edge well that decreased the number

152
00:05:53,680 --> 00:05:57,199
of components from five down to four now

153
00:05:57,199 --> 00:05:59,280
now we only have four what if i take

154
00:05:59,280 --> 00:06:02,240
another edge and increase it or add the

155
00:06:02,240 --> 00:06:04,800
edge over here now we have three

156
00:06:04,800 --> 00:06:06,800
different connected components what if i

157
00:06:06,800 --> 00:06:09,919
take another edge and add it over here

158
00:06:09,919 --> 00:06:11,919
well that didn't change anything we

159
00:06:11,919 --> 00:06:15,039
still have one two three connected

160
00:06:15,039 --> 00:06:17,840
components union find is basically an

161
00:06:17,840 --> 00:06:20,080
algorithm that can do stuff like this

162
00:06:20,080 --> 00:06:22,560
efficiently for us so suppose we added

163
00:06:22,560 --> 00:06:24,479
these three edges now we want to know

164
00:06:24,479 --> 00:06:26,479
how many connected components we have we

165
00:06:26,479 --> 00:06:28,560
have three connected components exactly

166
00:06:28,560 --> 00:06:31,120
three so three would be in the output

167
00:06:31,120 --> 00:06:33,440
now this is a very high level overview

168
00:06:33,440 --> 00:06:35,199
if you would like a more detailed

169
00:06:35,199 --> 00:06:37,360
explanation of the union find algorithm

170
00:06:37,360 --> 00:06:39,360
i would recommend watching this video

171
00:06:39,360 --> 00:06:41,199
which is actually number of connected

172
00:06:41,199 --> 00:06:44,080
components in an undirected graph which

173
00:06:44,080 --> 00:06:46,560
we solved using union find

174
00:06:46,560 --> 00:06:48,720
so the next algorithm on our list is

175
00:06:48,720 --> 00:06:50,319
definitely one of the more difficult

176
00:06:50,319 --> 00:06:52,400
ones and definitely more obscure you

177
00:06:52,400 --> 00:06:54,800
don't see this algorithm used a lot but

178
00:06:54,800 --> 00:06:56,960
it is topological sort and this

179
00:06:56,960 --> 00:06:59,680
algorithm is actually built on top of

180
00:06:59,680 --> 00:07:01,520
one of the previous algorithms dfs you

181
00:07:01,520 --> 00:07:03,520
can see why dfs is so important because

182
00:07:03,520 --> 00:07:05,440
it's actually used in a lot of other

183
00:07:05,440 --> 00:07:08,080
algorithms including topological sort so

184
00:07:08,080 --> 00:07:10,000
topological sort basically at a high

185
00:07:10,000 --> 00:07:13,120
level is we are given a directed

186
00:07:13,120 --> 00:07:15,759
acyclical graph basically a graph with

187
00:07:15,759 --> 00:07:18,720
directed edges and the graph will not

188
00:07:18,720 --> 00:07:21,199
have any cycles basically the

189
00:07:21,199 --> 00:07:23,360
topological sort of a graph like this

190
00:07:23,360 --> 00:07:26,319
one would be reading the values of every

191
00:07:26,319 --> 00:07:29,599
single node in the graph but only and

192
00:07:29,599 --> 00:07:31,599
basically printing those values out in

193
00:07:31,599 --> 00:07:34,720
such an order that for example d when we

194
00:07:34,720 --> 00:07:37,919
print d we have to make sure that every

195
00:07:37,919 --> 00:07:40,479
node that came before it has already

196
00:07:40,479 --> 00:07:42,960
been printed or processed or traversed

197
00:07:42,960 --> 00:07:45,280
or whatever you want to call it so one

198
00:07:45,280 --> 00:07:49,120
valid topological sort would be a b

199
00:07:49,120 --> 00:07:52,800
c d and e a topological sort doesn't

200
00:07:52,800 --> 00:07:55,039
have to be unique there's actually two

201
00:07:55,039 --> 00:07:57,599
different topological sorts in this

202
00:07:57,599 --> 00:08:00,160
graph we could do a and then we could do

203
00:08:00,160 --> 00:08:03,440
b and then c or we could do c

204
00:08:03,440 --> 00:08:05,520
and then do b that's two different

205
00:08:05,520 --> 00:08:07,520
choices we have but once we do those

206
00:08:07,520 --> 00:08:09,360
then the choices are limited then we

207
00:08:09,360 --> 00:08:11,520
have two nodes left we have to do d

208
00:08:11,520 --> 00:08:14,240
before we do e so one topological sort

209
00:08:14,240 --> 00:08:18,720
could be a b c d e this is where we are

210
00:08:18,720 --> 00:08:20,639
doing this with depth first search so

211
00:08:20,639 --> 00:08:22,400
the overall time complexity is going to

212
00:08:22,400 --> 00:08:25,440
be big o of n we are going to be using a

213
00:08:25,440 --> 00:08:27,599
hash set since we are doing dfs but if

214
00:08:27,599 --> 00:08:29,840
we do it recursively that should be the

215
00:08:29,840 --> 00:08:31,680
only data structure that we actually

216
00:08:31,680 --> 00:08:34,080
need this was a very quick explanation

217
00:08:34,080 --> 00:08:36,080
of topological sort but if you would

218
00:08:36,080 --> 00:08:37,760
like a more detailed solution and

219
00:08:37,760 --> 00:08:39,599
explanation i would recommend watching

220
00:08:39,599 --> 00:08:42,000
this video alien dictionary we

221
00:08:42,000 --> 00:08:44,320
comprehensively explain topological sort

222
00:08:44,320 --> 00:08:46,080
and then solve a problem using

223
00:08:46,080 --> 00:08:49,040
topological sort and the last algorithm

224
00:08:49,040 --> 00:08:51,920
i wanted to quickly go over is jixtra's

225
00:08:51,920 --> 00:08:53,600
shortest path algorithm this is

226
00:08:53,600 --> 00:08:54,480
definitely

227
00:08:54,480 --> 00:08:56,800
a popular famous algorithm and it does

228
00:08:56,800 --> 00:08:58,480
show up in leak code though it's not

229
00:08:58,480 --> 00:09:00,560
super common in leak code and encoding

230
00:09:00,560 --> 00:09:02,320
interviews but it's definitely a good to

231
00:09:02,320 --> 00:09:04,240
know you'll definitely learn this in

232
00:09:04,240 --> 00:09:06,160
school just like the name says it's

233
00:09:06,160 --> 00:09:09,360
about finding the shortest path from one

234
00:09:09,360 --> 00:09:11,279
node so let's say we had a starting node

235
00:09:11,279 --> 00:09:13,760
a we want to find the shortest path from

236
00:09:13,760 --> 00:09:17,680
a to every single node in the graph a b

237
00:09:17,680 --> 00:09:20,240
c d e right we want to find the length

238
00:09:20,240 --> 00:09:22,160
of the shortest path now the graphs

239
00:09:22,160 --> 00:09:24,560
we've been looking at so far have been

240
00:09:24,560 --> 00:09:26,640
pretty simple graphs right each edge

241
00:09:26,640 --> 00:09:28,320
actually doesn't have any weight

242
00:09:28,320 --> 00:09:30,399
associated with it each edge basically

243
00:09:30,399 --> 00:09:32,959
has a weight of one right a simple

244
00:09:32,959 --> 00:09:35,920
weight because they're all equal but we

245
00:09:35,920 --> 00:09:38,080
could actually have edges of different

246
00:09:38,080 --> 00:09:39,920
values suppose we had something like

247
00:09:39,920 --> 00:09:42,240
this so this makes finding the shortest

248
00:09:42,240 --> 00:09:43,839
path a little bit more difficult because

249
00:09:43,839 --> 00:09:45,680
we actually have to look at the values

250
00:09:45,680 --> 00:09:48,320
of every single edge in the graph now

251
00:09:48,320 --> 00:09:50,480
and the overall time complexity of

252
00:09:50,480 --> 00:09:52,399
jigsaw's algorithm is actually more

253
00:09:52,399 --> 00:09:54,160
complex than a regular dfs it's

254
00:09:54,160 --> 00:09:58,720
typically e log v where v is the number

255
00:09:58,720 --> 00:10:01,600
of nodes or vertices in the graph e is

256
00:10:01,600 --> 00:10:04,560
the number of edges in the graph it's a

257
00:10:04,560 --> 00:10:06,399
little bit more complex

258
00:10:06,399 --> 00:10:07,680
it's a little bit of a worse time

259
00:10:07,680 --> 00:10:09,920
complexity because we have to deal with

260
00:10:09,920 --> 00:10:11,920
these edges now how are we going to deal

261
00:10:11,920 --> 00:10:13,279
with these edges what data structure are

262
00:10:13,279 --> 00:10:15,760
we going to use a heap or a priority

263
00:10:15,760 --> 00:10:18,079
queue however you want to call it is

264
00:10:18,079 --> 00:10:21,040
usually the main data structure used to

265
00:10:21,040 --> 00:10:22,480
find the shortest path because we're

266
00:10:22,480 --> 00:10:23,760
going to have to be looking at the

267
00:10:23,760 --> 00:10:25,920
minimum edge and we're going to have to

268
00:10:25,920 --> 00:10:27,680
be looking at the minimum of many

269
00:10:27,680 --> 00:10:29,839
different values so the heap is going to

270
00:10:29,839 --> 00:10:32,240
be very helpful for doing that and you

271
00:10:32,240 --> 00:10:34,000
still don't want to you know get stuck

272
00:10:34,000 --> 00:10:36,959
in a cycle so hash sets are also helpful

273
00:10:36,959 --> 00:10:39,279
for this algorithm and just to give you

274
00:10:39,279 --> 00:10:40,959
a quick rundown of how this algorithm

275
00:10:40,959 --> 00:10:43,680
would work on this example we'd start at

276
00:10:43,680 --> 00:10:45,680
a we'd look at the shortest edge it's

277
00:10:45,680 --> 00:10:48,079
one so then we'd get to b we'd say you

278
00:10:48,079 --> 00:10:50,000
know the length to get to b is just

279
00:10:50,000 --> 00:10:52,560
going to be one then we'd look at the

280
00:10:52,560 --> 00:10:54,959
next two edges that are available to us

281
00:10:54,959 --> 00:10:57,279
we'd choose the smaller one this one

282
00:10:57,279 --> 00:10:59,120
which would get us to c so we'd say to

283
00:10:59,120 --> 00:11:01,839
get to c it just takes a length of two a

284
00:11:01,839 --> 00:11:04,320
weight of two and then we'd look at our

285
00:11:04,320 --> 00:11:06,560
next uh frontier we could we could

286
00:11:06,560 --> 00:11:08,560
choose the five or the two of course

287
00:11:08,560 --> 00:11:10,160
we're going to choose the two so then

288
00:11:10,160 --> 00:11:12,720
we'd say at this point d uh the cost to

289
00:11:12,720 --> 00:11:14,560
get to d is actually four we don't just

290
00:11:14,560 --> 00:11:16,240
include this single two but we also

291
00:11:16,240 --> 00:11:18,399
include the previous two that it took

292
00:11:18,399 --> 00:11:20,720
and then the last edge is e or the last

293
00:11:20,720 --> 00:11:22,800
node is e how long does it take to get

294
00:11:22,800 --> 00:11:24,480
to e basically

295
00:11:24,480 --> 00:11:26,079
as far as it takes to get to d which is

296
00:11:26,079 --> 00:11:29,519
four plus this one so e is five so this

297
00:11:29,519 --> 00:11:31,920
is kind of the uh you know the shortest

298
00:11:31,920 --> 00:11:35,600
paths to every single node in the out in

299
00:11:35,600 --> 00:11:37,920
the graph and for a more in-depth look

300
00:11:37,920 --> 00:11:40,240
at jigstra's algorithm i recommend

301
00:11:40,240 --> 00:11:42,000
taking a look at this problem network

302
00:11:42,000 --> 00:11:44,240
delay time i have a solution for this

303
00:11:44,240 --> 00:11:46,399
problem on my channel and i think i go

304
00:11:46,399 --> 00:11:48,640
over the entire concept of jigsaw's

305
00:11:48,640 --> 00:11:50,160
algorithm in detail and then we write

306
00:11:50,160 --> 00:11:52,639
out the code for that but that has been

307
00:11:52,639 --> 00:11:54,880
the entire video that's the top five

308
00:11:54,880 --> 00:11:56,800
most common algorithms in coding

309
00:11:56,800 --> 00:11:58,399
interviews there are a couple more

310
00:11:58,399 --> 00:12:00,079
algorithms that i do want to mention

311
00:12:00,079 --> 00:12:02,160
though there's a couple more algorithms

312
00:12:02,160 --> 00:12:04,399
that do sometimes come up in interviews

313
00:12:04,399 --> 00:12:07,360
but they're pretty rare so the two are

314
00:12:07,360 --> 00:12:10,000
i would recommend learning prims or

315
00:12:10,000 --> 00:12:12,480
kruskal's algorithm for minimum spanning

316
00:12:12,480 --> 00:12:14,639
trees both of the algorithms are pretty

317
00:12:14,639 --> 00:12:16,399
comparable so i would say you only

318
00:12:16,399 --> 00:12:18,240
really have to learn at least one of

319
00:12:18,240 --> 00:12:19,920
them but if you want to learn both of

320
00:12:19,920 --> 00:12:21,760
them they're pretty similar so you can

321
00:12:21,760 --> 00:12:23,839
and this is for minimum spanning trees

322
00:12:23,839 --> 00:12:25,519
and there's another algorithm which is

323
00:12:25,519 --> 00:12:27,360
pretty similar to jixtra's algorithm

324
00:12:27,360 --> 00:12:29,600
that can sometimes be useful in some

325
00:12:29,600 --> 00:12:31,279
difficult problems and that is this

326
00:12:31,279 --> 00:12:33,600
floyd were charles algorithm but this

327
00:12:33,600 --> 00:12:35,680
one is definitely pretty rare i've

328
00:12:35,680 --> 00:12:37,760
actually never seen this come up in any

329
00:12:37,760 --> 00:12:39,200
coding interview of mine and i've never

330
00:12:39,200 --> 00:12:41,279
heard of anybody getting this but some

331
00:12:41,279 --> 00:12:42,720
sometimes it does happen so if you

332
00:12:42,720 --> 00:12:44,959
really wanna but yeah that has been the

333
00:12:44,959 --> 00:12:47,120
most common graph algorithms for coding

334
00:12:47,120 --> 00:12:48,639
interviews i hope that this video was

335
00:12:48,639 --> 00:12:50,800
helpful if it was please like and

336
00:12:50,800 --> 00:12:52,639
subscribe and consider checking out my

337
00:12:52,639 --> 00:12:54,240
patreon where you can further support

338
00:12:54,240 --> 00:12:56,240
the channel i really appreciate all my

339
00:12:56,240 --> 00:12:58,240
patreon supporters and hopefully i'll

340
00:12:58,240 --> 00:13:02,240
see you pretty soon thanks for watching

